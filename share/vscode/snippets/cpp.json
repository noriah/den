{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "c++ header template": {
    "prefix": "headt",
    "body": [
      "#ifndef ${RELATIVE_FILEPATH/(?:src\\/)?(\\w+)(?:\\/|\\.h)/${1:/upcase}_/g}H_",
      "#define ${RELATIVE_FILEPATH/(?:src\\/)?(\\w+)(?:\\/|\\.h)/${1:/upcase}_/g}H_",
      "",
      "/**",
      " * ${RELATIVE_FILEPATH/^src\\///} - $1",
      " */",
      "",
      "$0",
      "",
      "#endif // ${RELATIVE_FILEPATH/(?:src\\/)?(\\w+)(?:\\/|\\.h)/${1:/upcase}_/g}H_"
    ],
    "description": "header file template"
  },
  "c++ class": {
    "prefix": "class",
    "body": [
      "class ${1:${TM_FILENAME_BASE}} {",
      " public:",
      "  ${1:${TM_FILENAME_BASE}}(${3:/* args */});",
      "  ~${1:${TM_FILENAME_BASE}}();",
      "",
      " private:",
      "  ${2:/* data */}",
      "};",
      "",
      "${1:${TM_FILENAME_BASE}}::${1:${TM_FILENAME_BASE}}(${3:/* args */}) {}",
      "",
      "${1:${TM_FILENAME_BASE}}::~${1:${TM_FILENAME_BASE}}() {}"
    ],
    "description": "c++ class template"
  }
}
